<?php
/**
 * Teste de Seguran√ßa - Sistema de Cadastro de T√©cnicos
 * Verifica se todas as prote√ß√µes de seguran√ßa est√£o funcionando
 */

require_once 'config.php';
require_once 'utils.php';
require_once 'security.php';

// Verificar se √© uma requisi√ß√£o autorizada (apenas localhost em desenvolvimento)
if (!in_array($_SERVER['REMOTE_ADDR'] ?? '', ['127.0.0.1', '::1', 'localhost'])) {
    http_response_code(403);
    die('Acesso negado - Teste de seguran√ßa apenas em localhost');
}

echo "<h1>üîí Teste de Seguran√ßa do Sistema</h1>";

// Teste 1: Verificar se o sistema de seguran√ßa est√° carregado
echo "<h2>1. Sistema de Seguran√ßa</h2>";
$security = SecurityManager::getInstance();
echo "‚úÖ Sistema de seguran√ßa carregado<br>";

// Teste 2: Verificar headers de seguran√ßa
echo "<h2>2. Headers de Seguran√ßa</h2>";
$headers = headers_list();
$securityHeaders = [
    'X-Frame-Options',
    'X-Content-Type-Options', 
    'X-XSS-Protection',
    'Content-Security-Policy'
];

foreach ($securityHeaders as $header) {
    $found = false;
    foreach ($headers as $h) {
        if (stripos($h, $header) !== false) {
            echo "‚úÖ $header: Configurado<br>";
            $found = true;
            break;
        }
    }
    if (!$found) {
        echo "‚ùå $header: N√£o configurado<br>";
    }
}

// Teste 3: Verificar configura√ß√µes de sess√£o
echo "<h2>3. Configura√ß√µes de Sess√£o</h2>";
echo "Cookie HttpOnly: " . (ini_get('session.cookie_httponly') ? "‚úÖ Ativado" : "‚ùå Desativado") . "<br>";
echo "Cookie Secure: " . (ini_get('session.cookie_secure') ? "‚úÖ Ativado" : "‚ùå Desativado") . "<br>";
echo "Use Strict Mode: " . (ini_get('session.use_strict_mode') ? "‚úÖ Ativado" : "‚ùå Desativado") . "<br>";

// Teste 4: Verificar token CSRF
echo "<h2>4. Prote√ß√£o CSRF</h2>";
$token = generateCSRFToken();
echo "‚úÖ Token CSRF gerado: " . substr($token, 0, 10) . "...<br>";
echo "‚úÖ Valida√ß√£o CSRF: " . (validateCSRFToken($token) ? "Funcionando" : "Erro") . "<br>";

// Teste 5: Verificar rate limiting
echo "<h2>5. Rate Limiting</h2>";
$testAction = 'security_test_' . time();
echo "‚úÖ Rate limiting: " . (checkRateLimit($testAction, 5, 60) ? "Funcionando" : "Erro") . "<br>";

// Teste 6: Verificar sanitiza√ß√£o de entrada
echo "<h2>6. Sanitiza√ß√£o de Entrada</h2>";
$testInput = '<script>alert("xss")</script>';
$sanitized = sanitizeInput($testInput);
echo "‚úÖ Sanitiza√ß√£o XSS: " . (strpos($sanitized, '<script>') === false ? "Funcionando" : "Erro") . "<br>";

$testEmail = 'test@example.com';
$sanitizedEmail = sanitizeInput($testEmail, 'email');
echo "‚úÖ Sanitiza√ß√£o Email: " . ($sanitizedEmail === $testEmail ? "Funcionando" : "Erro") . "<br>";

// Teste 7: Verificar valida√ß√£o de arquivo
echo "<h2>7. Valida√ß√£o de Arquivo</h2>";
$fakeFile = [
    'name' => 'test.jpg',
    'type' => 'image/jpeg',
    'tmp_name' => '/tmp/fake',
    'error' => UPLOAD_ERR_OK,
    'size' => 1024
];

// Simular arquivo v√°lido
if (function_exists('finfo_open')) {
    echo "‚úÖ Extens√£o FileInfo: Dispon√≠vel<br>";
} else {
    echo "‚ùå Extens√£o FileInfo: N√£o dispon√≠vel<br>";
}

// Teste 8: Verificar configura√ß√µes de upload
echo "<h2>8. Configura√ß√µes de Upload</h2>";
echo "Upload Max Filesize: " . ini_get('upload_max_filesize') . "<br>";
echo "Post Max Size: " . ini_get('post_max_size') . "<br>";
echo "Max Execution Time: " . ini_get('max_execution_time') . "s<br>";

// Teste 9: Verificar banco de dados
echo "<h2>9. Seguran√ßa do Banco de Dados</h2>";
try {
    $db = get_sqlite_connection();
    if ($db) {
        echo "‚úÖ Conex√£o SQLite: Segura (PDO)<br>";
        
        // Testar prepared statements
        $stmt = $db->prepare('SELECT COUNT(*) FROM admin WHERE username = ?');
        $stmt->execute(['test']);
        echo "‚úÖ Prepared Statements: Funcionando<br>";
    } else {
        echo "‚ùå Conex√£o SQLite: Erro<br>";
    }
} catch (Exception $e) {
    echo "‚ùå Erro no banco: " . $e->getMessage() . "<br>";
}

// Teste 10: Verificar logs de seguran√ßa
echo "<h2>10. Logs de Seguran√ßa</h2>";
$logFile = __DIR__ . '/logs/security.log';
if (file_exists($logFile)) {
    echo "‚úÖ Arquivo de log: Existe<br>";
    echo "Tamanho do log: " . filesize($logFile) . " bytes<br>";
} else {
    echo "‚ö†Ô∏è Arquivo de log: N√£o existe (ser√° criado quando necess√°rio)<br>";
}

// Teste 11: Verificar detec√ß√£o de requisi√ß√µes suspeitas
echo "<h2>11. Detec√ß√£o de Ataques</h2>";
$suspiciousTests = [
    '<script>alert("xss")</script>',
    'UNION SELECT * FROM users',
    'DROP TABLE admin',
    'javascript:alert(1)'
];

foreach ($suspiciousTests as $test) {
    $_REQUEST['test'] = $test;
    $isSuspicious = $security->isSuspiciousRequest();
    echo "‚úÖ Detec√ß√£o de '$test': " . ($isSuspicious ? "Bloqueado" : "Permitido") . "<br>";
    unset($_REQUEST['test']);
}

// Teste 12: Verificar configura√ß√µes de produ√ß√£o
echo "<h2>12. Configura√ß√µes de Produ√ß√£o</h2>";
echo "Debug Mode: " . ($config['app']['debug'] ? "‚ùå Ativado (desativar em produ√ß√£o)" : "‚úÖ Desativado") . "<br>";
echo "Display Errors: " . (ini_get('display_errors') ? "‚ùå Ativado (desativar em produ√ß√£o)" : "‚úÖ Desativado") . "<br>";
echo "Log Errors: " . (ini_get('log_errors') ? "‚úÖ Ativado" : "‚ùå Desativado") . "<br>";

// Resumo de seguran√ßa
echo "<h2>üìä Resumo de Seguran√ßa</h2>";
$totalTests = 12;
$passedTests = 0;

// Contar testes passados (simplificado)
if (isset($security)) $passedTests++;
if (ini_get('session.cookie_httponly')) $passedTests++;
if (function_exists('finfo_open')) $passedTests++;
if (!$config['app']['debug']) $passedTests++;
if (!ini_get('display_errors')) $passedTests++;

$securityScore = round(($passedTests / $totalTests) * 100);

echo "<div style='background: " . ($securityScore >= 80 ? "#d4edda" : "#f8d7da") . "; padding: 15px; border-radius: 5px;'>";
echo "<h3>Pontua√ß√£o de Seguran√ßa: $securityScore%</h3>";

if ($securityScore >= 90) {
    echo "üü¢ <strong>Excelente!</strong> Sistema muito seguro.";
} elseif ($securityScore >= 80) {
    echo "üü° <strong>Bom!</strong> Sistema seguro, mas pode ser melhorado.";
} elseif ($securityScore >= 70) {
    echo "üü† <strong>Aten√ß√£o!</strong> Sistema com algumas vulnerabilidades.";
} else {
    echo "üî¥ <strong>Cr√≠tico!</strong> Sistema com muitas vulnerabilidades.";
}

echo "</div>";

echo "<hr>";
echo "<p><a href='index.php'>‚Üê Voltar ao Sistema</a></p>";
echo "<p><small>Teste executado em: " . date('Y-m-d H:i:s') . "</small></p>";
?>
